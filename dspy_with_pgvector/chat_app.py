import ollama
import dspy
import rag_with_pgvector as rag
import json
import time
import random

import streamlit as st


# Read parameters file
parameters_file = "pg_params.json"

with open(parameters_file, 'r') as fh:
    params = json.loads(fh.read())

# Load Ollama local language model
lm = dspy.OllamaLocal(model=params["lm_name"])

# Configuring language model and retieval model to use in dspy
dspy.settings.configure(lm=lm)

# Build model
model = rag.RAG()




def model_response(text: str):
    '''Generates answer using the RAG model for the provided question
    
    Parameters
    ----------
    text (str):
        Question asked by user

    Returns
    -------
    str: Answer generated by model
    '''

    print("\nModel running for question: ", text)
    
    result = model(text)
    
    print("Answer: ", result.answer)

    return result.answer




def main():

    st.title("ChatBot")

    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []


    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        if 'role' in message.keys():
            if message['role'] == "user":
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])
            elif message['role'] == "assistant":
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])

    # Accept user input
    if prompt := st.chat_input("What is up?"):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})

        # Display user message in chat message container
        with st.chat_message("user"):
            st.markdown(prompt)

    
    if len(st.session_state.messages) != 0:
        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            response = model_response(st.session_state.messages[-1]['content'])
            st.write(response)

        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": response})




if __name__ == "__main__":
    main()